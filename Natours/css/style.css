*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* by shifting border-box down to the body element and adding inherit to this element, border-box will be applied to everything  */
  /* this is considered best practice  */
  Box-sizing: inherit;
}

html {
  /* root font size is declared in the html element  */
  /*1rem = 10px */
  font-size: 10px;
}

body {
  box-sizing: border-box;
}

/* ANIMATIONS */
@keyframes moveInLeft {
  /* at the start of the animation */
  0% {
    /* 0 opacity won't show the text  */
    opacity: 0;
    /* minus pixels will move the text towards the right */
    /* transform: translate(-100px); */
    transform: translate(-10rem);
  }
  80% {
    /* positive pixels will move towards the left */
    /* transform: translate(10px); */
    transform: translate(1rem);
  }
  /* at the end of the animation  */
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInRight {
  0% {
    opacity: 0;
    /* positive pixels will move towards the left */
    /* transform: translate(100px); */
    transform: translate(10rem);
  }
  80% {
    /* minus pixels will move the text towards the right */
    /* transform: translate(-10px); */
    transform: translate(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInBottom {
  0% {
    opacity: 0;
    /* positive pixels will move towards the left */
    /* transform: translateY(30px); */
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
body {
  font-family: "Lato", sans-serif;
  font-family: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* padding: 30px; */
  /* to get 30px based on rem(10px) 30 / 10 = 3    */
  padding: 3rem;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* margin-bottom: 60px; */
  margin-bottom: 6rem;
}
.heading-primary--main {
  display: block;
  /* font-size: 60px; */
  font-size: 6rem;
  font-weight: 400;
  /* letter-spacing: 35px; */
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-iteration-count: 2; 
  the amount of times the animation will occur*/
  /* animation-delay: 3s; 
  the animation won't start until this timer has finished*/
}
.heading-primary--sub {
  display: block;
  /* font-size: 20px; */
  font-size: 2rem;
  font-weight: 700;
  /* letter-spacing: 17.4px; */
  letter-spacing: 1.75rem;
  /* rather than state each animation element, they can all come under animation only */
  animation: moveInRight ease-out 1s;
}

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s;
}
.heading-secondary:hover {
  transform: skew(15deg, 2deg) scale(1.1);
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
}

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase;
}

.paragraph {
  font-size: 1.6rem;
}
.paragraph:not(:last-child) {
  margin-bottom: 3rem;
}

.u-center-text {
  text-align: center;
}

.u-margin-bottom-big {
  margin-bottom: 8rem;
}

.u-margin-bottom-medium {
  margin-bottom: 4rem;
}

.u-margin-bottom-small {
  margin-bottom: 2rem;
}

/* : represents a pseudo element  */
/* link and visited both target the element before and after its clicked and overides the default blue link before and purple after its clicked */
.btn {
  /* when an element is clicked */
}
.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  /* this gets rid of the default line under a link */
  /* padding: 15px 40px; */
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem;
}
.btn:hover {
  /* this moves the element up by isolating the Y axis and using a negative px */
  transform: translateY(-2px);
  /* box-shadow values: x axis, y axis, blur, then colour with opacity on the end - .3 = 30%  */
  /* box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3); */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.3);
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn:active {
  transform: translateY(-1px);
  /* box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3); */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);
}
.btn--white {
  background-color: #fff;
  color: #777;
  /* border-radius: 50px; */
  border-radius: 5rem;
}
.btn--white::after {
  background-color: #fff;
}
.btn::after {
  /* content and display are mandatory for the after psuedo element, even it they're left empty */
  /* it's considered a child element */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  /* border-radius: 50px; */
  border-radius: 5rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}
.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* automatically apply the 0% rules to the animation before it starts, so the button isn't visible before the animation is carried out  */
  animation-fill-mode: backwards;
}

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s;
}
.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
}
.btn-text:active {
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(0);
}

.composition {
  position: relative;
}
.composition__photo {
  width: 55%;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
  border-radius: 2px;
  position: absolute;
  z-index: 1;
  transition: all 0.2s;
  outline-offset: 2rem;
}
.composition__photo--p1 {
  left: 0;
  top: -2rem;
}
.composition__photo--p2 {
  right: 0;
  top: 2rem;
}
.composition__photo--p3 {
  left: 20%;
  top: 10rem;
}
.composition__photo:hover {
  outline: 1.5rem solid #55c57a;
  transform: scale(1.05) translateY(-0.5rem);
  box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
  z-index: 5;
}
.composition:hover .composition__photo:not(:hover) {
  transform: scale(0.95);
}

.header {
  height: 95vh;
  /* this means the header will take up 95% of the current view point height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /* cover fills the whole space occupied by the background image */
  background-position: top;
  /* when the window size is changed, the image will keep the top position fixed  */
  position: relative;
  /* the logo positions of left and top relate back to this parent element */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* this creates the clipping effect in the bottom right corner */
  /* each value pair is referring th how much of that corner (going clockwise) is clipped */
}
.header__logo-box {
  position: absolute;
  /* top: 40px;
  left: 40px; */
  top: 4rem;
  left: 4rem;
}
.header__logo {
  /* height: 35px; */
  height: 3.5rem;
  /* because height is specified, the width is automatically configured by the browser, and vice versa */
}
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  /* the top and left percentages are in relation to the parent element */
  transform: translate(-50%, -50%);
  /* transform is in relation to this element, it will be pulled back in by half of the width (left 50%) and the top (left) */
  text-align: center;
  /* this centers text within this element, i.e. the header, sub header and button */
}

.row {
  max-width: 114rem;
  margin: 0 auto;
}
.row:not(:last-child) {
  margin-bottom: 8rem;
}
.row:after {
  content: "";
  display: table;
  clear: both;
}
.row [class^=col-] {
  float: left;
}
.row [class^=col-]:not(:last-child) {
  margin-right: 8rem;
}
.row .col-1-of-2 {
  width: calc((100% - 8rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - 2 * 8rem) / 3);
}
.row .col-2-of-3 {
  width: calc(2 * ((100% - 2 * 8rem) / 3) + 8rem);
}
.row .col-1-of-4 {
  width: calc((100% - 3 * 8rem) / 4);
}
.row .col-2-of-4 {
  width: calc(2 * ((100% - 3 * 8rem) / 4) + 8rem);
}
.row .col-3-of-4 {
  width: calc(3 * ((100% - 3 * 8rem) / 4) + 2 *8rem);
}

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
}

/*# sourceMappingURL=style.css.map */
